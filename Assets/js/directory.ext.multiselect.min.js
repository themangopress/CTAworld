"use strict";
$(document).ready(function() {
    $.fn.extend({
        directory_ids: {
            allnet: "#allnet",
            filterby: "#filterby",
            orderby: "#orderby",
            searchby: "#searchby",
            startwith: "#startwith",
            country: "#country",
            statecity: "#statecity",
            city: "#city",
            keyword: "#keyword",
            directory_search: "#directory-search"
        },
        parseQuery: function(n) {
            if (n) {
                var t = n[0],
                    i = n[1];
                return t && t.length > 0 && (t = t.replace(/\+/g, " ")), i && i.length > 0 && (i = i.replace(/\+/g, " ")), {
                    key: decodeURIComponent(t),
                    value: decodeURIComponent(i)
                }
            }
            return undefined
        },
        parseQueryString: function() {
            var r = {},
                t = {},
                u = location.search.substr(1).split("&"),
                i, n;
            if (u)
                for (i = 0; i < u.length; i++)
                    if (n = $.fn.parseQuery(u[i].split("=")), n !== undefined && n.key !== undefined)
                        if ("networkids" === n.key.toLowerCase()) switch (n.value) {
                            case "1":
                                t.wca = n.value;
                                break;
                            case "2":
                                t.apln = n.value;
                                break;
                            case "3":
                                t.cgln = n.value;
                                break;
                            case "4":
                                t.igln = n.value;
                                break;
                            case "5":
                                t.wcapn = n.value;
                                break;
                            case "6":
                                t.aws = n.value;
                                break;
                            case "13":
                                t.pla = n.value;
                                break;
                            case "15":
                                t.wcarelo = n.value;
                                break;
                            case "16":
                                t.pharma = n.value;
                                break;
                            case "18":
                                t.tcla = n.value;
                                break;
                            case "22":
                                t.dgla = n.value;
                                break;
                            case "31":
                                t.pp = n.value;
                                break;
                            case "35":
                                t.rm = n.value;
                                break;
                            case "38":
                                t.vendor = n.value;
                                break;
                            case "41":
                                t.win = n.value;
                                break;
                            case "61":
                                t.lognet = n.value;
                                break;
                            case "98":
                                t.gaa = n.value;
                                break;
                            case "97":
                                t.lognet_vendors = n.value;
                                break;
                            case "103":
                                t.wca_ecom = n.value;
                                break;
                            case "105":
                                t.ecom = n.value;
                                break;
                            case "108":
                                t.egln = n.value
                        } else r[n.key] = n.value;
            return r.networkIds = t, r
        },
        getSelected: function(n, t) {
            return n === t ? ' selected="selected"' : ""
        },
        isSelected: function(n, t) {
            return n === t
        },
        getApi: function(n, t) {
            return $.ajax({
                url: n,
                type: "GET",
                cache: !1,
                crossDomain: !0,
                headers: {
                    "Access-Control-Allow-Origin": "*",
                    "WCA-Referer": t.wcareferer
                },
                beforeSend: function(n) {
                    n.setRequestHeader("Authorization", "Basic " + t.basic);
                    n.setRequestHeader("MY-XSRF-TOKEN", t.token)
                }
            })
        },
        onlyNumber: function(n) {
            var t = window.event ? n.keyCode : n.which;
            return n.keyCode === 8 || n.keyCode === 13 || n.keyCode === 46 ? !0 : t < 48 || t > 57 ? (alert("Please input Number only"), !1) : !0
        }
    });
    $.fn._selector = function(n) {
        return n = $.extend({}, $.fn.directory.defaults, n), {
            enabled: function() {
                return n.self && n.self.removeAttr("disabled"), this
            },
            disabled: function() {
                if (n.self) switch (n.self.type) {
                    case "input":
                        n.self.prop("disabled", !0);
                        break;
                    default:
                        n.self.attr("disabled", "disabled")
                }
                return this
            },
            reset: function() {
                if (n.self) {
                    var t = n.defaultVal;
                    n.self.find("option").remove().end();
                    n.self.append('<option value="' + t.value + '" ' + t.selected + ">" + t.text + "<\/option>");
                    this.disabled()
                }
                return this
            },
            add: function(t, i) {
                return n.self && n.self.append($("<option><\/option>").attr("value", t).text(i)), this
            },
            map: function(t, i) {
                return t ? $.each(t, function(t, r) {
                    n.self && ($.fn.isSelected(i, r.Code) ? n.self.append($("<option><\/option>").attr("value", r.Code).attr("selected", "selected").text(r.Name)) : n.self.append($("<option><\/option>").attr("value", r.Code).text(r.Name)))
                }) : alert("Sorry, the system could not load counties, please try again."), this
            },
            mapPopup: function(t, i) {
                return $.each(t, function(t, r) {
                    n.self && ($.fn.isSelected(i, r.Name) ? n.self.append($("<option><\/option>").attr("value", r.Name).attr("selected", "selected").text(r.Name)) : n.self.append($("<option><\/option>").attr("value", r.Name).text(r.Name)))
                }), n.au == "m" && n.self.append('<option value="Request">Others - Click here to send request<\/option>'), this
            }
        }
    };
    $.fn.allnet = function(n) {
        return n = $.extend({}, $.fn.directory.defaults, n), n.self = this, {
            options: n,
            set: function(t) {
                return n.self[0].checked = t, this
            },
            change: function() {
                return n.self.change(), this
            },
            checked: function() {
                return n.self[0].checked
            }
        }
    };
    $.fn.searchby = function(n) {
        return n = $.extend({}, $.fn.directory.defaults, n), n.self = this, n._selector = this._selector(n), {
            options: n,
            change: function() {
                return n.self.change(), this
            }
        }
    };
    $.fn.startwith = function(n) {
        return n = $.extend({}, $.fn.directory.defaults, n), n.self = this, n._selector = this._selector(n), {
            options: n,
            change: function() {
                return n.self.change(), this
            },
            load: function() {
                return $.fn.getApi(n.api + "/alphabets?isAuth=True", n).done(function(t) {
                    if (n._selector) {
                        var i = [];
                        $.each(t, function(n, t) {
                            i.push({
                                Code: t,
                                Name: t
                            })
                        });
                        n._selector.map(i).enabled()
                    }
                }), this
            },
            enabled: function() {
                return n._selector.enabled(), this
            },
            reset: function() {
                return n.self.find("option").remove().end(), n._selector.disabled(), this
            },
            hide: function() {
                return n.self.hide(), this
            },
            show: function() {
                return n.self.show(), this
            },
            focus: function() {
                return n.self.focus(), this
            },
            val: function() {
                return n.self.val()
            }
        }
    };
    $.fn.country = function(n) {
        return n = $.extend({}, $.fn.directory.defaults, n), n.self = this, n.defaultVal = n.defaultVal || {
            selected: $.fn.getSelected(n.queries.country, ""),
            text: "--- Country ---",
            value: ""
        }, n._selector = this._selector(n), {
            options: n,
            change: function() {
                return n.self.change(), this
            },
            load: function() {
                return $.fn.getApi(n.api + "/countries", n).done(function(t) {
                    n._selector && (n._selector.reset().map(t, n.queries.country).enabled(), n.self.change())
                }), this
            },
            enabled: function() {
                return n._selector.enabled(), this
            },
            reset: function() {
                return n._selector.reset(), this
            },
            hide: function() {
                return n.self.hide(), this
            },
            show: function() {
                return n.self.show(), this
            },
            focus: function() {
                return n.self.focus(), this
            },
            val: function() {
                return n.self.val()
            }
        }
    };
    $.fn.statecity = function(n) {
        return n = $.extend({}, $.fn.directory.defaults, n), n.self = this, n.countryCode = n.countryCode || "US", n.defaultVal = n.defaultVal || {
            selected: $.fn.getSelected(n.queries.statecity, ""),
            text: "All States",
            value: ""
        }, n._selector = this._selector(n), {
            options: n,
            change: function() {
                return n.self.change(), this
            },
            load: function(t) {
                return n.countryCode = t, $.fn.getApi(n.api + "/states?countryCode=" + n.countryCode, n).done(function(t) {
                    n._selector && (n._selector.reset().map(t, n.queries.statecity).enabled(), n.self.change())
                }), this
            },
            enabled: function() {
                return n._selector.enabled(), this
            },
            reset: function() {
                return n._selector.reset(), this
            },
            hide: function() {
                return n.self.hide(), this
            },
            show: function() {
                return n.self.show(), this
            },
            focus: function() {
                return n.self.focus(), this
            },
            val: function() {
                return n.self.val()
            }
        }
    };
    $.fn.city = function(n) {
        return n = $.extend({}, $.fn.directory.defaults, n), n.self = this, n.countryCode = n.countryCode || "", n.stateCode = n.stateCode || "", n.defaultVal = n.defaultVal || {
            selected: $.fn.getSelected(n.queries.city, ""),
            text: "All Cities",
            value: ""
        }, n._selector = this._selector(n), {
            options: n,
            change: function() {
                return n.self.change(), this
            },
            load: function(t, i) {
                return n.countryCode = t, n.stateCode = i, $.fn.getApi(n.api + "/cities/search?countryCode=" + n.countryCode + "&stateCode=" + n.stateCode + "&city=", n).done(function(t) {
                    n._selector && n._selector.reset().mapPopup(t, n.queries.city).enabled()
                }), this
            },
            enabled: function() {
                return n._selector.enabled(), this
            },
            reset: function() {
                return n._selector.reset(), this
            },
            hide: function() {
                return n.self.hide(), this
            },
            show: function() {
                return n.self.show(), this
            },
            focus: function() {
                return n.self.focus(), this
            },
            val: function() {
                return n.self.val()
            }
        }
    };
    $.fn.keyword = function(n) {
        return n = $.extend({}, $.fn.directory.defaults, n), n.self = this, {
            options: n,
            change: function() {
                return n.self.change(), this
            },
            bindKeypress: function() {
                return n.self.bind("keypress", $.fn.onlyNumber), this
            },
            unbindKeypress: function() {
                return n.self.unbind("keypress", $.fn.onlyNumber), this
            },
            hide: function() {
                return n.self.hide(), this
            },
            show: function() {
                return n.self.show(), this
            },
            focus: function() {
                return n.self.focus(), this
            },
            val: function() {
                return n.self.val()
            }
        }
    };
    $.fn.directory = function(n) {
        function t() {
            var t = $("select[name='networkIds']"),
                i = !1,
                n, r;
            if (t)
                for (n = 0; n < t.length; n++)
                    if (r = t[n], $("#" + r.id + " option:selected").each(function() {
                            i = !0
                        }), i) break;
            return i
        }
        n = $.extend({}, $.fn.directory.defaults, n);
        n._allnet = $("#allnet").allnet(n);
        n._filterby = $("#filterby");
        n._searchby = $("#searchby").searchby(n);
        n._startwith = $("#startwith").startwith(n);
        n._country = $("#country").country(n);
        n._statecity = $("#statecity").statecity(n);
        n._city = $("#city").city(n);
        n._keyword = $("#keyword").keyword(n);
        n._startwith.hide();
        n._country.hide();
        n._statecity.hide();
        n._city.hide();
        this.on("change", "#allnet", null, function(n) {
            for (var i, u = n.currentTarget, r = $("input[name='networkIds']"), t = 0; t < r.length; t++) i = r[t], i.id != "win" && (i.checked = u.checked)
        }).on("change", "input[name='networkIds']", null, function() {
            for (var i, r = !0, u = $("input[name='networkIds']"), t = 0; t < u.length; t++)
                if (i = u[t], !i.checked && i.id != "win") {
                    r = !1;
                    break
                }
            n._allnet.set(r)
        }).on("change", "#orderby", null, function() {}).on("change", "#searchby", null, function() {
            n._keyword.unbindKeypress();
            switch (this.value) {
                case "CountryCode":
                    n._filterby.show();
                    n._startwith.reset().hide();
                    n._country.show().focus().load();
                    n._statecity.hide();
                    n._city.hide();
                    n._keyword.show();
                    break;
                case "CompanyName":
                    n._country.reset().hide();
                    n._statecity.reset().hide();
                    n._city.reset().hide();
                    n._keyword.show().focus();
                    break;
                case "ID":
                    n._startwith.reset().hide();
                    n._country.reset().hide();
                    n._statecity.reset().hide();
                    n._city.reset().hide();
                    n._keyword.show().focus().bindKeypress();
                    break;
                default:
                    n._startwith.reset().hide();
                    n._country.reset().hide();
                    n._statecity.reset().hide();
                    n._city.reset().hide();
                    n._keyword.show()
            }
        }).on("change", "#startwith", null, function() {
            n._keyword.focus()
        }).on("change", "#country", null, function() {
            switch (this.value) {
                case "US":
                    n._city.reset().show();
                    n._statecity.load(this.value).show();
                    break;
                case "GB":
                    n._city.reset().show();
                    n._statecity.load(this.value).show();
                    break;
                default:
                    var t = n._country.val();
                    n._statecity.reset().hide();
                    n._city.load(t, "").show()
            }
        }).on("change", "#statecity", null, function() {
            var t = this.value || "",
                i;
            switch (t) {
                case "":
                    n._city.reset().show().enabled();
                    break;
                default:
                    i = n._statecity.options.countryCode;
                    n._city.reset().show();
                    n._city.load(i, t).show()
            }
        }).on("change", "#city", null, function() {
            var t = this.value || "";
            switch (t) {
                case "Request":
                    $("select[name=city]").val("");
                    $("#requestModal #showiframe iframe").attr("src", "");
                    $("#requestModal #showiframe").html("<iframe src='/Directory/RequestLocation' style='width:100%;height:100%;min-height:550px;border:0'><\/iframe>");
                    $("#requestModal").modal("show");
                    break;
                default:
                    n._keyword.focus()
            }
        }).on("submit", "#directory-search", null, function(i) {
            if (i.preventDefault(), $("select[name=orderby]").val() === "") return alert("Please select Order By"), !1;
            if ($("select[name=searchby]").val() === "") return alert("Please select Search By"), !1;
            if (!t()) return alert("Please select Networks"), !1;
            var r = $("select[name=searchby]").val();
            switch (r) {
                case "CountryCode":
                    if ($("select[name=country]").val() === "") return alert("Please select Country"), !1;
                    break;
                case "CompanyName":
                    if ($("input[name=keyword]").val() === "") return alert("Please fill Company Name"), n._keyword.focus(), !1;
                    break;
                case "ID":
                    if ($("input[name=keyword]").val() === "") return alert("Please fill ID Number"), n._keyword.focus(), !1
            }
            $("#btn_search").attr("disabled", "disabled");
            this.submit()
        });
        return {
            ready: function() {
                if (n._searchby.change(), n.isvalid === "True" && n.submitted) {
                    var i = 420,
                        t = $(n.resultdiv);
                    t && t.offset() && (i = t.offset().top);
                    $("html, body").animate({
                        scrollTop: i
                    }, 2e3)
                }
                return this
            }
        }
    };
    var n = $.fn.parseQueryString(),
        t = $.fn.directory.defaults = {
            queries: n
        }
});